// Generated by Illuminated Cloud on Thu Aug 22 15:33:54 GMT+02:00 2024. Do not edit.

global class /*System.*/Test
{
    global Test()
    {
    }

    global static void calculatePermissionSetGroup(List<String> psgIds)
    {
    }

    global static void calculatePermissionSetGroup(String psgId)
    {
    }

    global static void clearApexPageMessages()
    {
    }

    global Object clone()
    {
    }

    global static void createSoqlStub(SObjectType targetType, SoqlStubProvider soqlStub)
    {
    }

    global static Object createStub(Type parentType, StubProvider stubProvider)
    {
    }

    global static SObject createStubQueryRow(SObjectType targetType, Map<String,Object> fieldMapWithRelationshipKeys)
    {
    }

    global static List<SObject> createStubQueryRows(SObjectType targetType, List<Map<String,Object>> fieldMapWithRelationshipKeysForMultipleRows)
    {
    }

    global static void enableChangeDataCapture()
    {
    }

    global static List<Id> enqueueBatchJobs(Integer n)
    {
    }

    global static EventBus.TestBroker getEventBus()
    {
    }

    global static ExternalServiceTest getExternalService()
    {
    }

    global static List<Id> getFlexQueueOrder()
    {
    }

    global static Id getStandardPricebookId()
    {
    }

    global static Object invokeContinuationMethod(Object controller, Continuation continuation)
    {
    }

    global static Object invokePage(PageReference p)
    {
    }

    global static Boolean isRunningTest()
    {
    }

    global static Boolean isSoqlStubDefined(SObjectType targetType)
    {
    }

    global static List<SObject> loadData(SObjectType sobjectType, String staticResourceName)
    {
    }

    global static QuickAction.SendEmailQuickActionDefaults newSendEmailQuickActionDefaults(Id contextId, Id replyToId)
    {
    }

    global static void setContinuationResponse(String label, HttpResponse response)
    {
    }

    global static void setCreatedDate(Id id, Datetime dt)
    {
    }

    global static void setCurrentPage(Object pageReference)
    {
    }

    global static void setCurrentPageReference(Object pageReference)
    {
    }

    global static void setFixedSearchResults(List<String> searchResultsIds)
    {
    }

    global static void setMock(Type interfaceType, Object mock)
    {
    }

    global static void setReadOnlyApplicationMode(Boolean readOnlyApplicationMode)
    {
    }

    global static void startTest()
    {
    }

    global static void stopTest()
    {
    }

    global static void testInstall(InstallHandler script, Version version)
    {
    }

    global static void testInstall(InstallHandler script, Version version, Boolean isPush)
    {
    }

    global static void testSandboxPostCopyScript(SandboxPostCopy script, Id organizationId, Id sandboxId, String sandboxName)
    {
    }

    global static void testSandboxPostCopyScript(SandboxPostCopy script, Id organizationId, Id sandboxId, String sandboxName, Boolean isRunAsAutoProcUser)
    {
    }

    global static void testUninstall(UninstallHandler script)
    {
    }
}